<?php

namespace riders\controllers;

use riders\models\CartItem;
use riders\models\OrderAddress;
use riders\models\Orders;
use riders\models\SubCounties;
use riders\models\UserAddress;
use Yii;
use yii\db\Expression;
use yii\db\Query;
use yii\filters\VerbFilter;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * OrderAddressController implements the CRUD actions for OrderAddress model.
 */
class OrderAddressController extends Controller
{
    /**
     * @throws BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $this->view->params['cartCount'] = (int)CartItem::find()
            ->where(['created_by' => isCurrentUser()])
            ->sum('quantity');
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                'verbs' => [
                    'class' => VerbFilter::className(),
                    'actions' => [
                        'delete' => ['POST'],
                        'confirm' => ['POST']
                    ],
                ],
            ]
        );
    }

    /**
     * Lists all OrderAddress models.
     *
     * @return string
     */


    /**
     * Displays a single OrderAddress model.
     * @param int $ID ID
     * @return string
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($ID)
    {
        return $this->render('view', [
            'model' => $this->findModel($ID),
        ]);
    }

    /**
     * Creates a new OrderAddress model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return string|\yii\web\Response
     */
    public function actionCheckout()
    {
        $order = Orders::find()->where(['user_id' => isCurrentUser(), 'status' => Orders::STATUS_DRAFT])->one();

        $model = UserAddress::find()->where(['UserID' => isCurrentUser()])->one();


        $query = (new Query())
            ->select([
                'c.product_id',
                'p.image',
                'p.product_name',
                'p.price',
                'c.quantity',
                new Expression('p.price * c.quantity as total_price')
            ])
            ->from('CartItem c')
            ->innerJoin('Products p', 'p.ID = c.product_id')
            ->where(['c.created_by' => isCurrentUser(), 'c.order_id' => $order->ID]);

        $cartItems = $query->all();


        if (!$model) {
            $model = new UserAddress();
            $model->UserID = isCurrentUser();
        }

        $orderAddress = new OrderAddress();

        if ($this->request->isPost) {
            $orderAddress->order_id = $order->ID;
            $orderAddress->save();
            if ($model->load($this->request->post())) {
                if ($model->save()) {
                    Yii::$app->session->setFlash('success', 'Customer address was successfully saved');
                    return $this->redirect(Yii::$app->request->referrer);
                }
            } else {
                $model->loadDefaultValues();
            }
        }

        return $this->render('create', [
            'model' => $model, 'totalSum' => CartItem::getTotalCount($order->ID), 'cartItems' => $cartItems
        ]);
    }

    /**
     * @throws NotFoundHttpException
     */
    public function actionConfirm()
    {
        $order = Orders::find()->where(['user_id' => isCurrentUser(), 'status' => Orders::STATUS_DRAFT])->one();
        // VarDumper::dump($order,10,true);exit;
        if (!$order) throw new NotFoundHttpException('No order was found');

        $order->status = Orders::STATUS_CONFIRMED;
        $order->confirmed_at = date('Y:m:d H:i:s');
        if ($order->save()) {
            Yii::$app->session->setFlash('success', 'wYour order was successfully placed');
            return $this->redirect('/site/');
        }

    }

    public function actionSubcounties($id)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $subcounties = SubCounties::find()->where(['CountyID' => $id])->all();
        $options = [];
        foreach ($subcounties as $subcounty) {
            $options[] = ['id' => $subcounty->ID, 'name' => $subcounty->Name];
        }
        return $options;
    }


    /**
     * Updates an existing OrderAddress model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param int $ID ID
     * @return string|\yii\web\Response
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($ID)
    {
        $model = $this->findModel($ID);

        if ($this->request->isPost && $model->load($this->request->post()) && $model->save()) {
            return $this->redirect(['view', 'ID' => $model->ID]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing OrderAddress model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param int $ID ID
     * @return \yii\web\Response
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($ID)
    {
        $this->findModel($ID)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the OrderAddress model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param int $ID ID
     * @return OrderAddress the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($ID)
    {
        if (($model = OrderAddress::findOne(['ID' => $ID])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
